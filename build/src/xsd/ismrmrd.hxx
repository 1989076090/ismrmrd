// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_HANSENMS_MRPROGS_ISMRMRD_BUILD_SCHEMA_ISMRMRD_HXX
#define CXX_HOME_HANSENMS_MRPROGS_ISMRMRD_BUILD_SCHEMA_ISMRMRD_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace ISMRMRD
{
  class subjectInformationType;
  class experimentalConditionsType;
  class acquisitionSystemInformationType;
  class encodingSpaceType;
  class limitType;
  class encodingLimitsType;
  class trajectoryType;
  class userParameterLongType;
  class userParameterDoubleType;
  class ismrmrdHeader;
  class matrixSize;
  class fieldOfView_m;
  class encoding;
  class userParameters;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace ISMRMRD
{
  class subjectInformationType: public ::xml_schema::type
  {
    public:
    // patientName
    // 
    typedef ::xml_schema::string patientName_type;
    typedef ::xsd::cxx::tree::optional< patientName_type > patientName_optional;
    typedef ::xsd::cxx::tree::traits< patientName_type, char > patientName_traits;

    const patientName_optional&
    patientName () const;

    patientName_optional&
    patientName ();

    void
    patientName (const patientName_type& x);

    void
    patientName (const patientName_optional& x);

    void
    patientName (::std::auto_ptr< patientName_type > p);

    // patientWeight_kg
    // 
    typedef ::xml_schema::float_ patientWeight_kg_type;
    typedef ::xsd::cxx::tree::optional< patientWeight_kg_type > patientWeight_kg_optional;
    typedef ::xsd::cxx::tree::traits< patientWeight_kg_type, char > patientWeight_kg_traits;

    const patientWeight_kg_optional&
    patientWeight_kg () const;

    patientWeight_kg_optional&
    patientWeight_kg ();

    void
    patientWeight_kg (const patientWeight_kg_type& x);

    void
    patientWeight_kg (const patientWeight_kg_optional& x);

    // Constructors.
    //
    subjectInformationType ();

    subjectInformationType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    subjectInformationType (const subjectInformationType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual subjectInformationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~subjectInformationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    patientName_optional patientName_;
    patientWeight_kg_optional patientWeight_kg_;
  };

  class experimentalConditionsType: public ::xml_schema::type
  {
    public:
    // H1resonanceFrequencyHz
    // 
    typedef ::xml_schema::long_ H1resonanceFrequencyHz_type;
    typedef ::xsd::cxx::tree::traits< H1resonanceFrequencyHz_type, char > H1resonanceFrequencyHz_traits;

    const H1resonanceFrequencyHz_type&
    H1resonanceFrequencyHz () const;

    H1resonanceFrequencyHz_type&
    H1resonanceFrequencyHz ();

    void
    H1resonanceFrequencyHz (const H1resonanceFrequencyHz_type& x);

    // Constructors.
    //
    experimentalConditionsType (const H1resonanceFrequencyHz_type&);

    experimentalConditionsType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    experimentalConditionsType (const experimentalConditionsType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual experimentalConditionsType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~experimentalConditionsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< H1resonanceFrequencyHz_type > H1resonanceFrequencyHz_;
  };

  class acquisitionSystemInformationType: public ::xml_schema::type
  {
    public:
    // systemVendor
    // 
    typedef ::xml_schema::string systemVendor_type;
    typedef ::xsd::cxx::tree::optional< systemVendor_type > systemVendor_optional;
    typedef ::xsd::cxx::tree::traits< systemVendor_type, char > systemVendor_traits;

    const systemVendor_optional&
    systemVendor () const;

    systemVendor_optional&
    systemVendor ();

    void
    systemVendor (const systemVendor_type& x);

    void
    systemVendor (const systemVendor_optional& x);

    void
    systemVendor (::std::auto_ptr< systemVendor_type > p);

    // systemModel
    // 
    typedef ::xml_schema::string systemModel_type;
    typedef ::xsd::cxx::tree::optional< systemModel_type > systemModel_optional;
    typedef ::xsd::cxx::tree::traits< systemModel_type, char > systemModel_traits;

    const systemModel_optional&
    systemModel () const;

    systemModel_optional&
    systemModel ();

    void
    systemModel (const systemModel_type& x);

    void
    systemModel (const systemModel_optional& x);

    void
    systemModel (::std::auto_ptr< systemModel_type > p);

    // systemFieldStrength_T
    // 
    typedef ::xml_schema::float_ systemFieldStrength_T_type;
    typedef ::xsd::cxx::tree::optional< systemFieldStrength_T_type > systemFieldStrength_T_optional;
    typedef ::xsd::cxx::tree::traits< systemFieldStrength_T_type, char > systemFieldStrength_T_traits;

    const systemFieldStrength_T_optional&
    systemFieldStrength_T () const;

    systemFieldStrength_T_optional&
    systemFieldStrength_T ();

    void
    systemFieldStrength_T (const systemFieldStrength_T_type& x);

    void
    systemFieldStrength_T (const systemFieldStrength_T_optional& x);

    // Constructors.
    //
    acquisitionSystemInformationType ();

    acquisitionSystemInformationType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    acquisitionSystemInformationType (const acquisitionSystemInformationType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual acquisitionSystemInformationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~acquisitionSystemInformationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    systemVendor_optional systemVendor_;
    systemModel_optional systemModel_;
    systemFieldStrength_T_optional systemFieldStrength_T_;
  };

  class encodingSpaceType: public ::xml_schema::type
  {
    public:
    // matrixSize
    // 
    typedef ::ISMRMRD::matrixSize matrixSize_type;
    typedef ::xsd::cxx::tree::traits< matrixSize_type, char > matrixSize_traits;

    const matrixSize_type&
    matrixSize () const;

    matrixSize_type&
    matrixSize ();

    void
    matrixSize (const matrixSize_type& x);

    void
    matrixSize (::std::auto_ptr< matrixSize_type > p);

    // fieldOfView_m
    // 
    typedef ::ISMRMRD::fieldOfView_m fieldOfView_m_type;
    typedef ::xsd::cxx::tree::traits< fieldOfView_m_type, char > fieldOfView_m_traits;

    const fieldOfView_m_type&
    fieldOfView_m () const;

    fieldOfView_m_type&
    fieldOfView_m ();

    void
    fieldOfView_m (const fieldOfView_m_type& x);

    void
    fieldOfView_m (::std::auto_ptr< fieldOfView_m_type > p);

    // Constructors.
    //
    encodingSpaceType (const matrixSize_type&,
                       const fieldOfView_m_type&);

    encodingSpaceType (::std::auto_ptr< matrixSize_type >&,
                       ::std::auto_ptr< fieldOfView_m_type >&);

    encodingSpaceType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    encodingSpaceType (const encodingSpaceType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual encodingSpaceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~encodingSpaceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< matrixSize_type > matrixSize_;
    ::xsd::cxx::tree::one< fieldOfView_m_type > fieldOfView_m_;
  };

  class limitType: public ::xml_schema::type
  {
    public:
    // minimum
    // 
    typedef ::xml_schema::unsigned_short minimum_type;
    typedef ::xsd::cxx::tree::traits< minimum_type, char > minimum_traits;

    const minimum_type&
    minimum () const;

    minimum_type&
    minimum ();

    void
    minimum (const minimum_type& x);

    static minimum_type
    minimum_default_value ();

    // maximum
    // 
    typedef ::xml_schema::unsigned_short maximum_type;
    typedef ::xsd::cxx::tree::traits< maximum_type, char > maximum_traits;

    const maximum_type&
    maximum () const;

    maximum_type&
    maximum ();

    void
    maximum (const maximum_type& x);

    static maximum_type
    maximum_default_value ();

    // center
    // 
    typedef ::xml_schema::unsigned_short center_type;
    typedef ::xsd::cxx::tree::traits< center_type, char > center_traits;

    const center_type&
    center () const;

    center_type&
    center ();

    void
    center (const center_type& x);

    static center_type
    center_default_value ();

    // Constructors.
    //
    limitType (const minimum_type&,
               const maximum_type&,
               const center_type&);

    limitType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    limitType (const limitType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual limitType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~limitType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< minimum_type > minimum_;
    ::xsd::cxx::tree::one< maximum_type > maximum_;
    ::xsd::cxx::tree::one< center_type > center_;
  };

  class encodingLimitsType: public ::xml_schema::type
  {
    public:
    // kspace_encoding_step_1
    // 
    typedef ::ISMRMRD::limitType kspace_encoding_step_1_type;
    typedef ::xsd::cxx::tree::optional< kspace_encoding_step_1_type > kspace_encoding_step_1_optional;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_1_type, char > kspace_encoding_step_1_traits;

    const kspace_encoding_step_1_optional&
    kspace_encoding_step_1 () const;

    kspace_encoding_step_1_optional&
    kspace_encoding_step_1 ();

    void
    kspace_encoding_step_1 (const kspace_encoding_step_1_type& x);

    void
    kspace_encoding_step_1 (const kspace_encoding_step_1_optional& x);

    void
    kspace_encoding_step_1 (::std::auto_ptr< kspace_encoding_step_1_type > p);

    // kspace_encoding_step_2
    // 
    typedef ::ISMRMRD::limitType kspace_encoding_step_2_type;
    typedef ::xsd::cxx::tree::optional< kspace_encoding_step_2_type > kspace_encoding_step_2_optional;
    typedef ::xsd::cxx::tree::traits< kspace_encoding_step_2_type, char > kspace_encoding_step_2_traits;

    const kspace_encoding_step_2_optional&
    kspace_encoding_step_2 () const;

    kspace_encoding_step_2_optional&
    kspace_encoding_step_2 ();

    void
    kspace_encoding_step_2 (const kspace_encoding_step_2_type& x);

    void
    kspace_encoding_step_2 (const kspace_encoding_step_2_optional& x);

    void
    kspace_encoding_step_2 (::std::auto_ptr< kspace_encoding_step_2_type > p);

    // average
    // 
    typedef ::ISMRMRD::limitType average_type;
    typedef ::xsd::cxx::tree::optional< average_type > average_optional;
    typedef ::xsd::cxx::tree::traits< average_type, char > average_traits;

    const average_optional&
    average () const;

    average_optional&
    average ();

    void
    average (const average_type& x);

    void
    average (const average_optional& x);

    void
    average (::std::auto_ptr< average_type > p);

    // slice
    // 
    typedef ::ISMRMRD::limitType slice_type;
    typedef ::xsd::cxx::tree::optional< slice_type > slice_optional;
    typedef ::xsd::cxx::tree::traits< slice_type, char > slice_traits;

    const slice_optional&
    slice () const;

    slice_optional&
    slice ();

    void
    slice (const slice_type& x);

    void
    slice (const slice_optional& x);

    void
    slice (::std::auto_ptr< slice_type > p);

    // contrast
    // 
    typedef ::ISMRMRD::limitType contrast_type;
    typedef ::xsd::cxx::tree::optional< contrast_type > contrast_optional;
    typedef ::xsd::cxx::tree::traits< contrast_type, char > contrast_traits;

    const contrast_optional&
    contrast () const;

    contrast_optional&
    contrast ();

    void
    contrast (const contrast_type& x);

    void
    contrast (const contrast_optional& x);

    void
    contrast (::std::auto_ptr< contrast_type > p);

    // phase
    // 
    typedef ::ISMRMRD::limitType phase_type;
    typedef ::xsd::cxx::tree::optional< phase_type > phase_optional;
    typedef ::xsd::cxx::tree::traits< phase_type, char > phase_traits;

    const phase_optional&
    phase () const;

    phase_optional&
    phase ();

    void
    phase (const phase_type& x);

    void
    phase (const phase_optional& x);

    void
    phase (::std::auto_ptr< phase_type > p);

    // repetition
    // 
    typedef ::ISMRMRD::limitType repetition_type;
    typedef ::xsd::cxx::tree::optional< repetition_type > repetition_optional;
    typedef ::xsd::cxx::tree::traits< repetition_type, char > repetition_traits;

    const repetition_optional&
    repetition () const;

    repetition_optional&
    repetition ();

    void
    repetition (const repetition_type& x);

    void
    repetition (const repetition_optional& x);

    void
    repetition (::std::auto_ptr< repetition_type > p);

    // set
    // 
    typedef ::ISMRMRD::limitType set_type;
    typedef ::xsd::cxx::tree::optional< set_type > set_optional;
    typedef ::xsd::cxx::tree::traits< set_type, char > set_traits;

    const set_optional&
    set () const;

    set_optional&
    set ();

    void
    set (const set_type& x);

    void
    set (const set_optional& x);

    void
    set (::std::auto_ptr< set_type > p);

    // segment
    // 
    typedef ::ISMRMRD::limitType segment_type;
    typedef ::xsd::cxx::tree::optional< segment_type > segment_optional;
    typedef ::xsd::cxx::tree::traits< segment_type, char > segment_traits;

    const segment_optional&
    segment () const;

    segment_optional&
    segment ();

    void
    segment (const segment_type& x);

    void
    segment (const segment_optional& x);

    void
    segment (::std::auto_ptr< segment_type > p);

    // Constructors.
    //
    encodingLimitsType ();

    encodingLimitsType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    encodingLimitsType (const encodingLimitsType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual encodingLimitsType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~encodingLimitsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    kspace_encoding_step_1_optional kspace_encoding_step_1_;
    kspace_encoding_step_2_optional kspace_encoding_step_2_;
    average_optional average_;
    slice_optional slice_;
    contrast_optional contrast_;
    phase_optional phase_;
    repetition_optional repetition_;
    set_optional set_;
    segment_optional segment_;
  };

  class trajectoryType: public ::xml_schema::string
  {
    public:
    enum value
    {
      cartesian,
      epi,
      radial,
      goldenangle,
      spiral,
      other
    };

    trajectoryType (value v);

    trajectoryType (const char* v);

    trajectoryType (const ::std::string& v);

    trajectoryType (const ::xml_schema::string& v);

    trajectoryType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    trajectoryType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    trajectoryType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    trajectoryType (const trajectoryType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual trajectoryType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    trajectoryType&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_trajectoryType_convert ();
    }

    protected:
    value
    _xsd_trajectoryType_convert () const;

    public:
    static const char* const _xsd_trajectoryType_literals_[6];
    static const value _xsd_trajectoryType_indexes_[6];
  };

  class userParameterLongType: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::long_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    userParameterLongType (const name_type&,
                           const value_type&);

    userParameterLongType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    userParameterLongType (const userParameterLongType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual userParameterLongType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameterLongType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class userParameterDoubleType: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // value
    // 
    typedef ::xml_schema::double_ value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char, ::xsd::cxx::tree::schema_type::double_ > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    // Constructors.
    //
    userParameterDoubleType (const name_type&,
                             const value_type&);

    userParameterDoubleType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    userParameterDoubleType (const userParameterDoubleType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual userParameterDoubleType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameterDoubleType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class ismrmrdHeader: public ::xml_schema::type
  {
    public:
    // subjectInformation
    // 
    typedef ::ISMRMRD::subjectInformationType subjectInformation_type;
    typedef ::xsd::cxx::tree::optional< subjectInformation_type > subjectInformation_optional;
    typedef ::xsd::cxx::tree::traits< subjectInformation_type, char > subjectInformation_traits;

    const subjectInformation_optional&
    subjectInformation () const;

    subjectInformation_optional&
    subjectInformation ();

    void
    subjectInformation (const subjectInformation_type& x);

    void
    subjectInformation (const subjectInformation_optional& x);

    void
    subjectInformation (::std::auto_ptr< subjectInformation_type > p);

    // acquisitionSystemInformation
    // 
    typedef ::ISMRMRD::acquisitionSystemInformationType acquisitionSystemInformation_type;
    typedef ::xsd::cxx::tree::optional< acquisitionSystemInformation_type > acquisitionSystemInformation_optional;
    typedef ::xsd::cxx::tree::traits< acquisitionSystemInformation_type, char > acquisitionSystemInformation_traits;

    const acquisitionSystemInformation_optional&
    acquisitionSystemInformation () const;

    acquisitionSystemInformation_optional&
    acquisitionSystemInformation ();

    void
    acquisitionSystemInformation (const acquisitionSystemInformation_type& x);

    void
    acquisitionSystemInformation (const acquisitionSystemInformation_optional& x);

    void
    acquisitionSystemInformation (::std::auto_ptr< acquisitionSystemInformation_type > p);

    // experimentalConditions
    // 
    typedef ::ISMRMRD::experimentalConditionsType experimentalConditions_type;
    typedef ::xsd::cxx::tree::traits< experimentalConditions_type, char > experimentalConditions_traits;

    const experimentalConditions_type&
    experimentalConditions () const;

    experimentalConditions_type&
    experimentalConditions ();

    void
    experimentalConditions (const experimentalConditions_type& x);

    void
    experimentalConditions (::std::auto_ptr< experimentalConditions_type > p);

    // encoding
    // 
    typedef ::ISMRMRD::encoding encoding_type;
    typedef ::xsd::cxx::tree::sequence< encoding_type > encoding_sequence;
    typedef encoding_sequence::iterator encoding_iterator;
    typedef encoding_sequence::const_iterator encoding_const_iterator;
    typedef ::xsd::cxx::tree::traits< encoding_type, char > encoding_traits;

    const encoding_sequence&
    encoding () const;

    encoding_sequence&
    encoding ();

    void
    encoding (const encoding_sequence& s);

    // userParameters
    // 
    typedef ::ISMRMRD::userParameters userParameters_type;
    typedef ::xsd::cxx::tree::optional< userParameters_type > userParameters_optional;
    typedef ::xsd::cxx::tree::traits< userParameters_type, char > userParameters_traits;

    const userParameters_optional&
    userParameters () const;

    userParameters_optional&
    userParameters ();

    void
    userParameters (const userParameters_type& x);

    void
    userParameters (const userParameters_optional& x);

    void
    userParameters (::std::auto_ptr< userParameters_type > p);

    // Constructors.
    //
    ismrmrdHeader (const experimentalConditions_type&);

    ismrmrdHeader (::std::auto_ptr< experimentalConditions_type >&);

    ismrmrdHeader (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ismrmrdHeader (const ismrmrdHeader& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ismrmrdHeader*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ismrmrdHeader ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    subjectInformation_optional subjectInformation_;
    acquisitionSystemInformation_optional acquisitionSystemInformation_;
    ::xsd::cxx::tree::one< experimentalConditions_type > experimentalConditions_;
    encoding_sequence encoding_;
    userParameters_optional userParameters_;
  };

  class matrixSize: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::xml_schema::unsigned_short x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    static x_type
    x_default_value ();

    // y
    // 
    typedef ::xml_schema::unsigned_short y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    static y_type
    y_default_value ();

    // z
    // 
    typedef ::xml_schema::unsigned_short z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    static z_type
    z_default_value ();

    // Constructors.
    //
    matrixSize (const x_type&,
                const y_type&,
                const z_type&);

    matrixSize (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    matrixSize (const matrixSize& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual matrixSize*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~matrixSize ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class fieldOfView_m: public ::xml_schema::type
  {
    public:
    // x
    // 
    typedef ::xml_schema::float_ x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    // 
    typedef ::xml_schema::float_ y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // z
    // 
    typedef ::xml_schema::float_ z_type;
    typedef ::xsd::cxx::tree::traits< z_type, char > z_traits;

    const z_type&
    z () const;

    z_type&
    z ();

    void
    z (const z_type& x);

    // Constructors.
    //
    fieldOfView_m (const x_type&,
                   const y_type&,
                   const z_type&);

    fieldOfView_m (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    fieldOfView_m (const fieldOfView_m& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual fieldOfView_m*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~fieldOfView_m ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< z_type > z_;
  };

  class encoding: public ::xml_schema::type
  {
    public:
    // encodedSpace
    // 
    typedef ::ISMRMRD::encodingSpaceType encodedSpace_type;
    typedef ::xsd::cxx::tree::traits< encodedSpace_type, char > encodedSpace_traits;

    const encodedSpace_type&
    encodedSpace () const;

    encodedSpace_type&
    encodedSpace ();

    void
    encodedSpace (const encodedSpace_type& x);

    void
    encodedSpace (::std::auto_ptr< encodedSpace_type > p);

    // reconSpace
    // 
    typedef ::ISMRMRD::encodingSpaceType reconSpace_type;
    typedef ::xsd::cxx::tree::traits< reconSpace_type, char > reconSpace_traits;

    const reconSpace_type&
    reconSpace () const;

    reconSpace_type&
    reconSpace ();

    void
    reconSpace (const reconSpace_type& x);

    void
    reconSpace (::std::auto_ptr< reconSpace_type > p);

    // encodingLimits
    // 
    typedef ::ISMRMRD::encodingLimitsType encodingLimits_type;
    typedef ::xsd::cxx::tree::traits< encodingLimits_type, char > encodingLimits_traits;

    const encodingLimits_type&
    encodingLimits () const;

    encodingLimits_type&
    encodingLimits ();

    void
    encodingLimits (const encodingLimits_type& x);

    void
    encodingLimits (::std::auto_ptr< encodingLimits_type > p);

    // trajectory
    // 
    typedef ::ISMRMRD::trajectoryType trajectory_type;
    typedef ::xsd::cxx::tree::traits< trajectory_type, char > trajectory_traits;

    const trajectory_type&
    trajectory () const;

    trajectory_type&
    trajectory ();

    void
    trajectory (const trajectory_type& x);

    void
    trajectory (::std::auto_ptr< trajectory_type > p);

    // Constructors.
    //
    encoding (const encodedSpace_type&,
              const reconSpace_type&,
              const encodingLimits_type&,
              const trajectory_type&);

    encoding (::std::auto_ptr< encodedSpace_type >&,
              ::std::auto_ptr< reconSpace_type >&,
              ::std::auto_ptr< encodingLimits_type >&,
              const trajectory_type&);

    encoding (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    encoding (const encoding& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual encoding*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~encoding ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< encodedSpace_type > encodedSpace_;
    ::xsd::cxx::tree::one< reconSpace_type > reconSpace_;
    ::xsd::cxx::tree::one< encodingLimits_type > encodingLimits_;
    ::xsd::cxx::tree::one< trajectory_type > trajectory_;
  };

  class userParameters: public ::xml_schema::type
  {
    public:
    // userParameterLong
    // 
    typedef ::ISMRMRD::userParameterLongType userParameterLong_type;
    typedef ::xsd::cxx::tree::sequence< userParameterLong_type > userParameterLong_sequence;
    typedef userParameterLong_sequence::iterator userParameterLong_iterator;
    typedef userParameterLong_sequence::const_iterator userParameterLong_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterLong_type, char > userParameterLong_traits;

    const userParameterLong_sequence&
    userParameterLong () const;

    userParameterLong_sequence&
    userParameterLong ();

    void
    userParameterLong (const userParameterLong_sequence& s);

    // userParameterDouble
    // 
    typedef ::ISMRMRD::userParameterDoubleType userParameterDouble_type;
    typedef ::xsd::cxx::tree::sequence< userParameterDouble_type > userParameterDouble_sequence;
    typedef userParameterDouble_sequence::iterator userParameterDouble_iterator;
    typedef userParameterDouble_sequence::const_iterator userParameterDouble_const_iterator;
    typedef ::xsd::cxx::tree::traits< userParameterDouble_type, char > userParameterDouble_traits;

    const userParameterDouble_sequence&
    userParameterDouble () const;

    userParameterDouble_sequence&
    userParameterDouble ();

    void
    userParameterDouble (const userParameterDouble_sequence& s);

    // Constructors.
    //
    userParameters ();

    userParameters (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    userParameters (const userParameters& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual userParameters*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~userParameters ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    userParameterLong_sequence userParameterLong_;
    userParameterDouble_sequence userParameterDouble_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace ISMRMRD
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ISMRMRD::ismrmrdHeader >
  ismrmrdHeader_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace ISMRMRD
{
  // Serialize to std::ostream.
  //

  void
  ismrmrdHeader_ (::std::ostream& os,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::std::ostream& os,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::std::ostream& os,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ismrmrdHeader_ (::xercesc::XMLFormatTarget& ft,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::xercesc::XMLFormatTarget& ft,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  ismrmrdHeader_ (::xercesc::XMLFormatTarget& ft,
                  const ::ISMRMRD::ismrmrdHeader& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ismrmrdHeader_ (::xercesc::DOMDocument& d,
                  const ::ISMRMRD::ismrmrdHeader& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ismrmrdHeader_ (const ::ISMRMRD::ismrmrdHeader& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const subjectInformationType&);

  void
  operator<< (::xercesc::DOMElement&, const experimentalConditionsType&);

  void
  operator<< (::xercesc::DOMElement&, const acquisitionSystemInformationType&);

  void
  operator<< (::xercesc::DOMElement&, const encodingSpaceType&);

  void
  operator<< (::xercesc::DOMElement&, const limitType&);

  void
  operator<< (::xercesc::DOMElement&, const encodingLimitsType&);

  void
  operator<< (::xercesc::DOMElement&, const trajectoryType&);

  void
  operator<< (::xercesc::DOMAttr&, const trajectoryType&);

  void
  operator<< (::xml_schema::list_stream&,
              const trajectoryType&);

  void
  operator<< (::xercesc::DOMElement&, const userParameterLongType&);

  void
  operator<< (::xercesc::DOMElement&, const userParameterDoubleType&);

  void
  operator<< (::xercesc::DOMElement&, const ismrmrdHeader&);

  void
  operator<< (::xercesc::DOMElement&, const matrixSize&);

  void
  operator<< (::xercesc::DOMElement&, const fieldOfView_m&);

  void
  operator<< (::xercesc::DOMElement&, const encoding&);

  void
  operator<< (::xercesc::DOMElement&, const userParameters&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_HANSENMS_MRPROGS_ISMRMRD_BUILD_SCHEMA_ISMRMRD_HXX
